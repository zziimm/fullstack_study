1. 커밋 메시지 룰과 작성법
첫번째 라인: 제목(필수)
두번쨰 라인: 공란
세번째 라인부터: 내용 작성, 무엇을 왜(선택)
마지막 라인: 꼬리말(#이슈 넘버)(선택)

작성팁: 최대한 구체적으로 작성, (ex. 주간 보고에 그대로 쓸 정도로 작성)

2. 커밋 전에 diff(차이점) 확인하기! 매우 좋은 습관!! (명령어 : git diff), git tool에서도 확인 가능

3. 왜 굳이 git add -> commit 두 단계에 걸쳐서 하는지?
= 모든 파일을 굳이 기록할 필요가 없기 때문

버전을 여러개로 나눠서 만들고 싶은 경우
1. git add로 기록할 파일을 고르고
2. git commit으로 버전 생성(기록 완료)

4. 언제, 얼마나 commit 하는게 좋을까?
ctrl + s 누르는 것처럼 5초마다 습관적으로 할 필요는 없고
간단한 기능을 하나 추가할 때 마다 commit 하면 됨

예를 들어 웹 개발시 회원가입 기능을 만든다고 하면
- 회원가입 폼 레이아웃 UI를 만들면 commit 하고
- 입력한 이메일이 맞는지 검증하는 기능(유효성 검사)을 만들었으면 commit 하고
- 서버로 데이터를 전송하는 기능을 만들었으면 commit 하고

작은 작업 하나 마쳤으면 commit 하는 것이 좋음
위 3작업 다 하고 commit 하는 사람도 있지만
최소 하루에 1개 이상 commit 을 하자! (좋은 습관)

5. CLI 명령어 기반 vs GUI 툴 비교
명령어는 모든 기능 사용 가능 / GUI 툴은 툴 자체에 구현된 기능만 쓸 수 있음

6. git push -u origin main
-u 옵션은 방금 입력한 주소를 기억해라 임
그 다음부터는 주소를 입력하지 않고 git push만 입력해도 됨

7. git remote -v
원격저장소 정보를 보고 싶을 때

8. git clone https://원격저장소 주소
원격저장소에 올린 프로젝트를 내 로컬에 복제(1번만 하면 됨)

9. git pull origin
원격저장소에 있는 모든 브랜치 내용을 가져와서 로컬 저장소에 합치라는 뜻
git pull origin main
- 특정 브랜치(main)만 가져올 수 있음

(중요) 작업하기 전에 git pull을 받아서 항상 최신 상태로 만들어놓고 작업 시작!!!

10. 저장소에 올리지 않은 파일들은 .gitignore
설정 파일이나 빌드 산출물, 기타 라이브러리 파일들 등
불필요한 파일들은 올리지 않는 것이 좋음
.gitignore 파일을 만들어서 올리지 않을 폴더나 파일을 명시하면 됨
그러면 git에서 해당 폴더랑 파일을 무시함

과제:
파일을 새로 만들거나 수정하면서 commit을 5번 이상 해보기
중간중간 git status, git log도 써보기
